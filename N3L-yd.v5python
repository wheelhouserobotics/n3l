{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 1)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_g = DigitalOut(brain.three_wire_port.g)\nLady_Brown = Motor(Ports.PORT7, GearSetting.RATIO_6_1, True)\nHangL = DigitalOut(brain.three_wire_port.b)\nHangR = DigitalOut(brain.three_wire_port.h)\ncontroller_1 = Controller(PRIMARY)\nscoring = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nLady_Brown.set_velocity(75, PERCENT)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    action = 1\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    scoring.set_velocity(100, PERCENT)\n    Lady_Brown.set_position(0, DEGREES)\n    Lady_Brown.set_velocity(75, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n\n            if controller_1.buttonR1.pressing():\n                scoring.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n\n            if controller_1.buttonR2.pressing():\n                scoring.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            \n            if controller_1.buttonA.pressing():\n                scoring.stop()\n\n            if controller_1.buttonB.pressing():\n                #Lady_Brown.spin_for(FORWARD, 450, DEGREES)\n                Lady_Brown.set_velocity(75, PERCENT)\n                Lady_Brown.spin_to_position(450, DEGREES)\n\n            if controller_1.buttonY.pressing():\n                #Lady_Brown.spin_for(REVERSE, 450, DEGREES)\n                Lady_Brown.set_velocity(25, PERCENT)\n                Lady_Brown.spin_to_position(0, DEGREES)\n\n                \n\n        \n            if controller_1.buttonX.pressing():\n                Lady_Brown.stop()\n\n\n                #if action == 1:\n                 #   Lady_Brown.spin_to_position(0, DEGREES)\n                   # action = 2\n\n                #elif action == 2:\n                 #   Lady_Brown.spin_to_position(100, DEGREES)\n                  #  action = 3\n\n                #elif action == 3:\n                 #   Lady_Brown.spin_to_position(250, DEGREES)\n                  #  action = 1\n\n            if controller_1.buttonDown.pressing():  \n                digital_out_a.set(True)\n                digital_out_g.set(True)\n\n            if controller_1.buttonUp.pressing():  \n                digital_out_a.set(False)\n                digital_out_g.set(False)\n\n\n            \n            \n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n# VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# # Robot configuration code\n# L3 = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\n# R3 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\n# left_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\n# left_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\n# left_drive_smart = MotorGroup(left_motor_a, left_motor_b,L3)\n# right_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\n# right_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True)\n# right_drive_smart = MotorGroup(right_motor_a, right_motor_b,R3)\n# drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 1)\n# scoring = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)\n# digital_out_a = DigitalOut(brain.three_wire_port.a)\n# digital_out_g = DigitalOut(brain.three_wire_port.g)\n# Lady_Brown = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\n# # Ramp = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\n# HangL = DigitalOut(brain.three_wire_port.b)\n# HangR = DigitalOut(brain.three_wire_port.h)\n# controller_1 = Controller(PRIMARY)\n\n\n# # wait for rotation sensor to fully initialize\n# wait(30, MSEC)\n\n\n# # Make random actually random\n# def initializeRandomSeed():\n#     wait(100, MSEC)\n#     random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n#     urandom.seed(int(random))\n      \n# # Set random seed \n# initializeRandomSeed()\n\n\n# def play_vexcode_sound(sound_name):\n#     # Helper to make playing sounds from the V5 in VEXcode easier and\n#     # keeps the code cleaner by making it clear what is happening.\n#     print(\"VEXPlaySound:\" + sound_name)\n#     wait(5, MSEC)\n\n# # add a small delay to make sure we don't print in the middle of the REPL header\n# wait(200, MSEC)\n# # clear the console to make sure we don't have the REPL in the console\n# print(\"\\033[2J\")\n\n\n\n# # define variables used for controlling motors based on controller inputs\n# drivetrain_l_needs_to_be_stopped_controller_1 = False\n# drivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# # define a task that will handle monitoring inputs from controller_1\n# def rc_auto_loop_function_controller_1():\n#     global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n#     # process the controller input every 20 milliseconds\n#     # update the motors based on the input values\n#     while True:\n#         if remote_control_code_enabled:\n            \n#             # calculate the drivetrain motor velocities from the controller joystick axies\n#             # left = axis3 + axis1\n#             # right = axis3 - axis1\n#             drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n#             drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n#             # check if the value is inside of the deadband range\n#             if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n#                 # check if the left motor has already been stopped\n#                 if drivetrain_l_needs_to_be_stopped_controller_1:\n#                     # stop the left drive motor\n#                     left_drive_smart.stop()\n#                     # tell the code that the left motor has been stopped\n#                     drivetrain_l_needs_to_be_stopped_controller_1 = False\n#             else:\n#                 # reset the toggle so that the deadband code knows to stop the left motor next\n#                 # time the input is in the deadband range\n#                 drivetrain_l_needs_to_be_stopped_controller_1 = True\n#             # check if the value is inside of the deadband range\n#             if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n#                 # check if the right motor has already been stopped\n#                 if drivetrain_r_needs_to_be_stopped_controller_1:\n#                     # stop the right drive motor\n#                     right_drive_smart.stop()\n#                     # tell the code that the right motor has been stopped\n#                     drivetrain_r_needs_to_be_stopped_controller_1 = False\n#             else:\n#                 # reset the toggle so that the deadband code knows to stop the right motor next\n#                 # time the input is in the deadband range\n#                 drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n#             # only tell the left drive motor to spin if the values are not in the deadband range\n#             if drivetrain_l_needs_to_be_stopped_controller_1:\n#                 left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n#                 left_drive_smart.spin(FORWARD)\n#             # only tell the right drive motor to spin if the values are not in the deadband range\n#             if drivetrain_r_needs_to_be_stopped_controller_1:\n#                 right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n#                 right_drive_smart.spin(FORWARD)\n#         # wait before repeating the process\n#         wait(20, MSEC)\n\n# # define variable for remote controller enable/disable\n# remote_control_code_enabled = True\n\n# rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n#   Project:      VEXcode Project\n#   Author:       VEX\n#   Created:\n#   Description:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n\n\n\n\n\n","textLanguage":"python","robotConfig":[{"port":[1,2,4,5,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel275in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"digital_out_g","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"Lady_Brown","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"HangL","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[8],"name":"HangR","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"true","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[12],"name":"scoring","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}