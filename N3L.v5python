{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nL1 = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nL2 = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nL3 = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nR1 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\nR2 = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True)\nR3 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\n# left_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)\n# left_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(L1,L2,L3)\n# right_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_6_1, True)\n# right_motor_b = Motor(Ports.PORT17, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(R1,R2,R3)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\ndrivetrain.set_drive_velocity(75, PERCENT)\nRollers = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_g = DigitalOut(brain.three_wire_port.g)\nLady_Brown = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nRamp = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nHangL = DigitalOut(brain.three_wire_port.b)\nHangR = DigitalOut(brain.three_wire_port.h)\n\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis2 + axis4\n            # right = axis2 - axis4\n            drivetrain_left_side_speed = controller_1.axis2.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis2.position() - controller_1.axis4.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\ndef driver_control():\n    pass\n    while True:\n        drivetrain.velocity(75)\n        #Needs if condition so that it keeps checking every single button\n        # Intake/Outtake\n        if controller_1.buttonR1.pressing()::\n            Rollers.spin(REVERSE)\n            Ramp.spin(REVERSE)\n        \n        if controller_1.buttonR2.pressing()::\n            Rollers.spin(FORWARD)\n            Ramp.spin(FORWARD)\n        #ladybrown\n        if controller_1.buttonX.pressing()::\n            Lady_Brown.spin(REVERSE)\n\n        if controller_1.buttonB.pressing()::\n            Lady_Brown.spin(FORWARD)\n\n        if controller_1.buttonY.pressing()::\n            Lady_Brown.spin_for(FORWARD, 90, DEGREES)\n        # MGL\n        if controller_1.buttonDown.pressing()::\n            digital_out_a.set(False)\n            digital_out_g.set(False)\n        \n        if controller_1.buttonUp.pressing()::\n            digital_out_a.set(True)\n            digital_out_g.set(True)\n        #Hang\n        if controller_1.buttonLeft.pressing()::\n            HangL.set(False)\n            HangR.set(False)\n\n        if controller_1.buttonRight.pressing()::\n            HangL.set(True)\n            HangR.set(True)\n        # Turbo Boost Button\n        if controller_1.buttonL1.pressing()::\n            drivetrain.velocity(100)\n\n        elif not controller_1.buttonL1.pressing():\n            drivetrain.velocity(75)\n            \n            \n            \n\n\n            \n            \n\n\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n#   Project:      VEXcode Project\n#   Author:       VEX\n#   Created:\n#   Description:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n","textLanguage":"python","robotConfig":[{"port":[1],"name":"L1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"L2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"L3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"R1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"R2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"R3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[18,19,20,17,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel275in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[12],"name":"Rollers","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"digital_out_g","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"Lady_Brown","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"splitRight","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"Ramp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"HangL","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[8],"name":"HangR","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}